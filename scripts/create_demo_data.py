#!/usr/bin/env python3
"""
Create comprehensive demo data for SlayFlashcards.

Creates two demo users with quizzes, flashcards, and learning history.
Target audience: Polish high school teenagers.
"""
import sys
from pathlib import Path
from datetime import datetime, timedelta
import random

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from core.db.database import get_db, engine, Base
from core.services.user_service import UserService
from core.services.quiz_service import QuizService
from core.db.crud.repository.quiz_repository import QuizRepository
from core.db.crud.repository.flashcard_repository import FlashcardRepository
from core.db.models import Session as SessionModel
from api.api_schemas import UserCreate


def get_demo_users():
    """
    Get demo users configuration from environment variable or use defaults.

    Environment variable DEMO_SECRETS should contain JSON like:
    {
        "demo_users": [
            {
                "username": "Emila",
                "email": "emila@demo.pl",
                "password": "SecurePassword123!",
                "full_name": "Emila Kowalska"
            }
        ]
    }
    """
    import os
    import json

    # Default fallback users (for local development)
    default_users = [
        {
            "username": "Emila",
            "email": "emila@demo.pl",
            "password": "Emila123!",
            "full_name": "Emila Kowalska"
        },
        {
            "username": "Kriz",
            "email": "kriz@demo.pl",
            "password": "Kriz123!",
            "full_name": "Kriz Nowak"
        }
    ]

    # Try to load from environment variable
    secrets_json = os.environ.get('DEMO_SECRETS')
    if secrets_json:
        try:
            secrets = json.loads(secrets_json)
            users = secrets.get('demo_users', [])
            if users:
                print("   ‚ÑπÔ∏è  Using demo users from DEMO_SECRETS environment variable")
                return users
            else:
                print("   ‚ö†Ô∏è  No demo_users found in DEMO_SECRETS, using defaults")
        except json.JSONDecodeError as e:
            print(f"   ‚ö†Ô∏è  Failed to parse DEMO_SECRETS JSON: {e}, using defaults")
    else:
        print("   ‚ÑπÔ∏è  DEMO_SECRETS not set, using default demo users")

    return default_users


# User credentials - loaded from environment or defaults
USERS = get_demo_users()


def get_answer_types_test_quiz():
    """Get test quiz data covering all answer types."""
    return {
        "name": "Test wszystkich typ√≥w odpowiedzi",
        "subject": "Testowanie",
        "category": "Typy odpowiedzi",
        "level": "Wszystkie",
        "description": "Quiz demonstracyjny pokazujƒÖcy wszystkie mo≈ºliwe typy odpowiedzi",
        "favourite": False,
        "image": "üß™",
        "flashcards": [
            # TEXT
            {
                "question": {"title": "Pytanie otwarte (text)", "text": "Opisz proces fotosyntezy w ro≈õlinach.", "lang": "pl", "difficulty": 3, "emoji": "üå±", "examples": ["Ro≈õliny wykorzystujƒÖ ≈õwiat≈Ço s≈Çoneczne...", "Chlorofil w li≈õciach poch≈Çania energiƒô..."]},
                "answer": {"text": "Fotosynteza to proces, w kt√≥rym ro≈õliny przekszta≈ÇcajƒÖ dwutlenek wƒôgla i wodƒô w glukozƒô i tlen przy u≈ºyciu energii s≈Çonecznej. Zachodzi w chloroplastach, gdzie chlorofil poch≈Çania ≈õwiat≈Ço.", "type": "text", "lang": "pl", "metadata": {"hint": "Opisz proces w 2-3 zdaniach", "rows": 4, "min_words": 15}}
            },
            # SHORT_TEXT
            {
                "question": {"title": "Kr√≥tka odpowied≈∫ (short_text)", "text": "Jaka jest stolica Francji?", "lang": "pl", "difficulty": 1, "emoji": "üá´üá∑", "examples": ["Pary≈º", "Paris"]},
                "answer": {"text": "Pary≈º", "type": "short_text", "lang": "pl", "metadata": {"hint": "Wpisz nazwƒô miasta", "placeholder": "np. Warszawa", "case_sensitive": False}}
            },
            # INTEGER
            {
                "question": {"title": "Liczba ca≈Çkowita (integer)", "text": "Ile dni ma rok przestƒôpny?", "lang": "pl", "difficulty": 1, "emoji": "üìÖ", "examples": ["365", "366"]},
                "answer": {"text": "366", "type": "integer", "lang": "pl", "metadata": {"hint": "Wpisz liczbƒô ca≈ÇkowitƒÖ", "placeholder": "np. 365", "min": 365, "max": 366}}
            },
            # FLOAT
            {
                "question": {"title": "Liczba dziesiƒôtna (float)", "text": "Jaka jest warto≈õƒá liczby œÄ (pi) z dok≈Çadno≈õciƒÖ do 2 miejsc po przecinku?", "lang": "pl", "difficulty": 2, "emoji": "ü•ß", "examples": ["3.14", "3.141", "3.1415"]},
                "answer": {"text": "3.14", "type": "float", "lang": "pl", "metadata": {"hint": "Wpisz liczbƒô z dok≈Çadnie 2 miejscami po przecinku", "decimal_places": 2, "step": 0.01, "example": "3.14"}}
            },
            # RANGE
            {
                "question": {"title": "Zakres liczbowy (range)", "text": "Jaka jest normalna temperatura cia≈Ça cz≈Çowieka w stopniach Celsjusza?", "lang": "pl", "difficulty": 2, "emoji": "üå°Ô∏è", "examples": ["36.6", "37.0"]},
                "answer": {"text": "36.6", "type": "range", "lang": "pl", "metadata": {"min": 36.0, "max": 37.5, "step": 0.1, "hint": "Wybierz temperaturƒô w zakresie 36.0-37.5¬∞C", "labels": {"min": "Niska", "max": "Wysoka"}}}
            },
            # BOOLEAN
            {
                "question": {"title": "Prawda/Fa≈Çsz (boolean)", "text": "Czy Ziemia jest p≈Çaska?", "lang": "pl", "difficulty": 1, "emoji": "üåç"},
                "answer": {"text": "false", "type": "boolean", "lang": "pl", "metadata": {"true_label": "Tak", "false_label": "Nie", "hint": "Wybierz Tak lub Nie"}}
            },
            # CHOICE
            {
                "question": {"title": "Wyb√≥r jednej opcji (choice)", "text": "Kt√≥ry planet jest najwiƒôkszy w Uk≈Çadzie S≈Çonecznym?", "lang": "pl", "difficulty": 2, "emoji": "ü™ê"},
                "answer": {"text": "b", "type": "choice", "lang": "pl", "options": [
                    {"value": "a", "label": "Mars"},
                    {"value": "b", "label": "Jowisz"},
                    {"value": "c", "label": "Saturn"},
                    {"value": "d", "label": "Ziemia"}
                ], "metadata": {"hint": "Wybierz jednƒÖ poprawnƒÖ odpowied≈∫"}}
            },
            # MULTIPLE_CHOICE
            {
                "question": {"title": "Wyb√≥r wielu opcji (multiple_choice)", "text": "Kt√≥re z poni≈ºszych sƒÖ jƒôzykami programowania?", "lang": "pl", "difficulty": 2, "emoji": "üíª"},
                "answer": {"text": "a,c,d", "type": "multiple_choice", "lang": "pl", "options": [
                    {"value": "a", "label": "Python"},
                    {"value": "b", "label": "HTML"},
                    {"value": "c", "label": "JavaScript"},
                    {"value": "d", "label": "Java"},
                    {"value": "e", "label": "CSS"}
                ], "metadata": {"hint": "Zaznacz wszystkie poprawne odpowiedzi (3 opcje)", "exact_count": 3}}
            },
            # TEXT - Another variant
            {
                "question": {"title": "Pytanie otwarte 2 (text)", "text": "Wyja≈õnij r√≥≈ºnicƒô miƒôdzy sztucznƒÖ inteligencjƒÖ a uczeniem maszynowym.", "lang": "pl", "difficulty": 4, "emoji": "ü§ñ", "examples": ["AI to szersze pojƒôcie obejmujƒÖce...", "Uczenie maszynowe jest podzbiorem AI..."]},
                "answer": {"text": "Sztuczna inteligencja (AI) to szeroka dziedzina obejmujƒÖca wszelkie systemy symulujƒÖce ludzkƒÖ inteligencjƒô. Uczenie maszynowe (ML) jest podzbiorem AI, skupiajƒÖcym siƒô na algorytmach uczƒÖcych siƒô z danych bez jawnego programowania.", "type": "text", "lang": "pl", "metadata": {"hint": "Opisz obie koncepcje i ich zwiƒÖzek", "rows": 5, "min_words": 20}}
            },
            # SHORT_TEXT - Another variant
            {
                "question": {"title": "Kr√≥tka odpowied≈∫ 2 (short_text)", "text": "Jaki jƒôzyk programowania u≈ºywa interpretera CPython?", "lang": "pl", "difficulty": 2, "emoji": "üêç", "examples": ["Python"]},
                "answer": {"text": "Python", "type": "short_text", "lang": "pl", "metadata": {"hint": "Wpisz nazwƒô jƒôzyka programowania", "placeholder": "np. Java", "max_length": 20}}
            },
            # INTEGER - Another variant
            {
                "question": {"title": "Liczba ca≈Çkowita 2 (integer)", "text": "Ile chromosom√≥w ma cz≈Çowiek?", "lang": "pl", "difficulty": 2, "emoji": "üß¨", "examples": ["46"]},
                "answer": {"text": "46", "type": "integer", "lang": "pl", "metadata": {"hint": "Wpisz liczbƒô ca≈ÇkowitƒÖ chromosom√≥w", "min": 1, "max": 100, "example": "23"}}
            },
            # FLOAT - Another variant
            {
                "question": {"title": "Liczba dziesiƒôtna 2 (float)", "text": "Jaka jest warto≈õƒá przyspieszenia ziemskiego w m/s¬≤ (zaokrƒÖglone do 1 miejsca)?", "lang": "pl", "difficulty": 2, "emoji": "üçé", "examples": ["9.8", "9.81"]},
                "answer": {"text": "9.8", "type": "float", "lang": "pl", "metadata": {"hint": "Wpisz warto≈õƒá z 1 miejscem po przecinku", "decimal_places": 1, "step": 0.1, "unit": "m/s¬≤", "example": "9.8"}}
            },
            # BOOLEAN - Another variant
            {
                "question": {"title": "Prawda/Fa≈Çsz 2 (boolean)", "text": "Czy wieloryby sƒÖ rybami?", "lang": "pl", "difficulty": 2, "emoji": "üêã"},
                "answer": {"text": "false", "type": "boolean", "lang": "pl", "metadata": {"true_label": "Prawda", "false_label": "Fa≈Çsz"}}
            },
            # CHOICE - Another variant
            {
                "question": {"title": "Wyb√≥r jednej opcji 2 (choice)", "text": "W kt√≥rym roku upad≈Ç Mur Berli≈Ñski?", "lang": "pl", "difficulty": 3, "emoji": "üß±"},
                "answer": {"text": "c", "type": "choice", "lang": "pl", "options": [
                    {"value": "a", "label": "1987"},
                    {"value": "b", "label": "1988"},
                    {"value": "c", "label": "1989"},
                    {"value": "d", "label": "1990"}
                ], "metadata": {"hint": "Wybierz rok (4 cyfry)"}}
            },
            # MULTIPLE_CHOICE - Another variant
            {
                "question": {"title": "Wyb√≥r wielu opcji 2 (multiple_choice)", "text": "Kt√≥re z poni≈ºszych to gazy szlachetne?", "lang": "pl", "difficulty": 3, "emoji": "‚öóÔ∏è"},
                "answer": {"text": "a,c,e", "type": "multiple_choice", "lang": "pl", "options": [
                    {"value": "a", "label": "Hel (He)"},
                    {"value": "b", "label": "Tlen (O‚ÇÇ)"},
                    {"value": "c", "label": "Neon (Ne)"},
                    {"value": "d", "label": "Azot (N‚ÇÇ)"},
                    {"value": "e", "label": "Argon (Ar)"}
                ], "metadata": {"hint": "Zaznacz wszystkie gazy szlachetne", "min_selections": 1, "max_selections": 5}}
            },
        ]
    }


# Quiz data for Polish high school students
QUIZZES = {
    "Emila": [
        {
            "file": "data/historia-pracz≈Çowiek.json",
            "category": "Prehistoria",
            "level": "Klasa 1",
            "favourite": True,
            "image": "üèõÔ∏è"
        },
        {
            "file": "data/staro≈ºytny_egipt.json",
            "category": "Staro≈ºytno≈õƒá",
            "level": "Klasa 1",
            "favourite": True,
            "image": "üè∫"
        },
        {
            "name": "Funkcje kwadratowe",
            "subject": "Matematyka",
            "category": "Funkcje",
            "level": "Klasa 2",
            "description": "Podstawy funkcji kwadratowych",
            "favourite": True,
            "image": "üìê",
            "flashcards": [
                {
                    "question": {"title": "Postaƒá og√≥lna", "text": "Jaka jest postaƒá og√≥lna funkcji kwadratowej?", "lang": "pl", "difficulty": 1, "emoji": "üìê", "examples": ["np. f(x) = 2x¬≤ + 3x - 5", "np. f(x) = -x¬≤ + 4x + 1"]},
                    "answer": {"text": "f(x) = ax¬≤ + bx + c", "type": "text", "lang": "pl"}
                },
                {
                    "question": {"title": "Wierzcho≈Çek paraboli", "text": "Jak obliczyƒá wsp√≥≈ÇrzƒôdnƒÖ x wierzcho≈Çka paraboli?", "lang": "pl", "difficulty": 2, "emoji": "üìä", "examples": ["dla f(x) = 2x¬≤ + 8x + 3, x = -8/(2√ó2) = -2"]},
                    "answer": {"text": "x = -b/(2a)", "type": "text", "lang": "pl"}
                },
                {
                    "question": {"title": "Delta", "text": "Co to jest delta (wyr√≥≈ºnik) funkcji kwadratowej?", "lang": "pl", "difficulty": 2, "emoji": "üî∫"},
                    "answer": {"text": "Œî = b¬≤ - 4ac", "type": "text", "lang": "pl"}
                },
                {
                    "question": {"title": "Liczba pierwiastk√≥w", "text": "Ile pierwiastk√≥w ma funkcja kwadratowa gdy Œî > 0?", "lang": "pl", "difficulty": 1, "emoji": "‚úåÔ∏è"},
                    "answer": {"text": "2", "type": "integer", "lang": "pl"}
                },
                {
                    "question": {"title": "Ramiona paraboli w g√≥rƒô", "text": "Czy ramiona paraboli sƒÖ skierowane w g√≥rƒô gdy a > 0?", "lang": "pl", "difficulty": 1, "emoji": "‚¨ÜÔ∏è"},
                    "answer": {"text": "true", "type": "boolean", "lang": "pl", "metadata": {"true_label": "Tak", "false_label": "Nie"}}
                },
                {
                    "question": {"title": "Postaƒá kanoniczna", "text": "Wybierz poprawnƒÖ postaƒá kanonicznƒÖ funkcji kwadratowej:", "lang": "pl", "difficulty": 2, "emoji": "üìù"},
                    "answer": {"text": "a", "type": "choice", "lang": "pl", "options": [
                        {"value": "a", "label": "f(x) = a(x-p)¬≤ + q"},
                        {"value": "b", "label": "f(x) = a(x+p)¬≤ - q"},
                        {"value": "c", "label": "f(x) = ax¬≤ + bx + c"},
                        {"value": "d", "label": "f(x) = (x-p)(x-q)"}
                    ]}
                },
                {
                    "question": {"title": "W≈Ça≈õciwo≈õci paraboli", "text": "Wybierz wszystkie prawdziwe w≈Ça≈õciwo≈õci paraboli:", "lang": "pl", "difficulty": 3, "emoji": "‚úì"},
                    "answer": {"text": "a,b,d", "type": "multiple_choice", "lang": "pl", "options": [
                        {"value": "a", "label": "Ma o≈õ symetrii"},
                        {"value": "b", "label": "Mo≈ºe przecinaƒá o≈õ OX w 0, 1 lub 2 punktach"},
                        {"value": "c", "label": "Zawsze przechodzi przez poczƒÖtek uk≈Çadu wsp√≥≈Çrzƒôdnych"},
                        {"value": "d", "label": "Ma warto≈õƒá ekstremalnƒÖ (minimum lub maksimum)"}
                    ]}
                },
                {
                    "question": {"title": "Ocena trudno≈õci", "text": "Oce≈Ñ swojƒÖ znajomo≈õƒá funkcji kwadratowych (1-5):", "lang": "pl", "difficulty": 1, "emoji": "‚≠ê"},
                    "answer": {"text": "3", "type": "range", "lang": "pl", "metadata": {"min": 1, "max": 5, "step": 1}}
                }
            ]
        },
        {
            "name": "Czasy gramatyczne",
            "subject": "Jƒôzyk angielski",
            "category": "Gramatyka",
            "level": "Klasa 2",
            "description": "PrzeglƒÖd czas√≥w gramatycznych w jƒôzyku angielskim",
            "favourite": False,
            "image": "üá¨üáß",
            "flashcards": [
                {
                    "question": {"title": "Present Simple", "text": "Kiedy u≈ºywamy Present Simple?", "lang": "pl", "difficulty": 1, "emoji": "‚è∞", "examples": ["I play tennis every Sunday", "Water boils at 100¬∞C"]},
                    "answer": {"text": "Czynno≈õci regularne, fakty, prawdy og√≥lne", "type": "text", "lang": "pl"}
                },
                {
                    "question": {"title": "Present Continuous", "text": "Wybierz poprawnƒÖ formƒô Present Continuous:", "lang": "pl", "difficulty": 1, "emoji": "üîÑ"},
                    "answer": {"text": "a", "type": "choice", "lang": "pl", "options": [
                        {"value": "a", "label": "am/is/are + czasownik-ing"},
                        {"value": "b", "label": "have/has + czasownik-ing"},
                        {"value": "c", "label": "was/were + czasownik-ed"},
                        {"value": "d", "label": "will + czasownik-ing"}
                    ]}
                },
                {
                    "question": {"title": "Past Simple", "text": "Kiedy u≈ºywamy Past Simple?", "lang": "pl", "difficulty": 1, "emoji": "üìÖ", "examples": ["I visited Paris last year", "She studied English yesterday"]},
                    "answer": {"text": "Czynno≈õci zako≈Ñczone w przesz≈Ço≈õci", "type": "text", "lang": "pl"}
                },
                {
                    "question": {"title": "Present Perfect", "text": "Jak tworzymy Present Perfect?", "lang": "pl", "difficulty": 2, "emoji": "‚úÖ"},
                    "answer": {"text": "have/has + past participle (III forma)", "type": "text", "lang": "pl"}
                },
                {
                    "question": {"title": "U≈ºywamy 'will'", "text": "Czy 'will' u≈ºywamy do spontanicznych decyzji?", "lang": "pl", "difficulty": 1, "emoji": "üí°"},
                    "answer": {"text": "true", "type": "boolean", "lang": "pl", "metadata": {"true_label": "Tak", "false_label": "Nie"}}
                },
                {
                    "question": {"title": "S≈Çowa kluczowe", "text": "Wybierz wszystkie s≈Çowa, kt√≥re czƒôsto wystƒôpujƒÖ z Present Perfect:", "lang": "pl", "difficulty": 3, "emoji": "üîë"},
                    "answer": {"text": "a,c,d", "type": "multiple_choice", "lang": "pl", "options": [
                        {"value": "a", "label": "already"},
                        {"value": "b", "label": "yesterday"},
                        {"value": "c", "label": "yet"},
                        {"value": "d", "label": "just"},
                        {"value": "e", "label": "last week"}
                    ]}
                },
                {
                    "question": {"title": "Formy czasownika", "text": "Ile form czasownika nieregularnego musimy znaƒá w angielskim?", "lang": "pl", "difficulty": 1, "emoji": "üìù"},
                    "answer": {"text": "3", "type": "integer", "lang": "pl", "metadata": {"hint": "bezokolicznik, Past Simple, Past Participle"}}
                }
            ]
        },
        {
            "name": "Budowa kom√≥rki",
            "subject": "Biologia",
            "category": "Cytologia",
            "level": "Klasa 1",
            "description": "Podstawowe struktury kom√≥rkowe",
            "favourite": False,
            "image": "üß¨",
            "flashcards": [
                {
                    "question": {"title": "JƒÖdro kom√≥rkowe", "text": "Co zawiera jƒÖdro kom√≥rkowe?", "lang": "pl", "difficulty": 1, "emoji": "üß¨"},
                    "answer": {"text": "Materia≈Ç genetyczny DNA", "type": "short_text", "lang": "pl"}
                },
                {
                    "question": {"title": "Mitochondria", "text": "JakƒÖ funkcjƒô pe≈ÇniƒÖ mitochondria?", "lang": "pl", "difficulty": 1, "emoji": "‚ö°"},
                    "answer": {"text": "Produkcja energii ATP", "type": "short_text", "lang": "pl"}
                },
                {
                    "question": {"title": "Chloroplasty", "text": "W jakich kom√≥rkach wystƒôpujƒÖ chloroplasty?", "lang": "pl", "difficulty": 1, "emoji": "üåø"},
                    "answer": {"text": "W kom√≥rkach ro≈õlinnych", "type": "short_text", "lang": "pl"}
                },
                {
                    "question": {"title": "B≈Çona kom√≥rkowa", "text": "JakƒÖ funkcjƒô pe≈Çni b≈Çona kom√≥rkowa?", "lang": "pl", "difficulty": 1, "emoji": "üõ°Ô∏è"},
                    "answer": {"text": "Ochrona i transport substancji", "type": "short_text", "lang": "pl"}
                },
                {
                    "question": {"title": "Rybosomy", "text": "Co syntetyzujƒÖ rybosomy?", "lang": "pl", "difficulty": 2, "emoji": "üè≠"},
                    "answer": {"text": "Bia≈Çka", "type": "short_text", "lang": "pl"}
                }
            ]
        },
        get_answer_types_test_quiz()
    ],
    "Kriz": [
        {
            "file": "data/french1.json",
            "category": "Podstawy",
            "level": "Klasa 1",
            "favourite": False,
            "image": "üá´üá∑"
        },
        {
            "file": "data/staro≈ºytny_egipt.json",
            "category": "Staro≈ºytno≈õƒá",
            "level": "Klasa 1",
            "favourite": False,
            "image": "üè∫"
        },
        {
            "name": "Ruch i si≈Çy",
            "subject": "Fizyka",
            "category": "Mechanika",
            "level": "Klasa 1",
            "description": "Podstawy dynamiki i kinematyki",
            "favourite": True,
            "image": "‚öõÔ∏è",
            "flashcards": [
                {
                    "question": {"title": "Prƒôdko≈õƒá", "text": "Jaki jest wz√≥r na prƒôdko≈õƒá?", "lang": "pl", "difficulty": 1, "emoji": "üèÉ", "examples": ["je≈õli samoch√≥d przejedzie 100m w 5s, to v = 100/5 = 20 m/s"]},
                    "answer": {"text": "v = s/t", "type": "text", "lang": "pl"}
                },
                {
                    "question": {"title": "Przyspieszenie", "text": "Jaki jest wz√≥r na przyspieszenie?", "lang": "pl", "difficulty": 2, "emoji": "üöÄ"},
                    "answer": {"text": "a = Œîv/Œît", "type": "text", "lang": "pl"}
                },
                {
                    "question": {"title": "II zasada dynamiki", "text": "Wybierz poprawne stwierdzenie dotyczƒÖce II zasady dynamiki Newtona:", "lang": "pl", "difficulty": 2, "emoji": "‚öñÔ∏è"},
                    "answer": {"text": "b", "type": "choice", "lang": "pl", "options": [
                        {"value": "a", "label": "Przyspieszenie jest odwrotnie proporcjonalne do si≈Çy"},
                        {"value": "b", "label": "F = ma (si≈Ça r√≥wna siƒô masa razy przyspieszenie)"},
                        {"value": "c", "label": "Masa jest proporcjonalna do prƒôdko≈õci"},
                        {"value": "d", "label": "Si≈Ça jest sta≈Ça dla ka≈ºdego cia≈Ça"}
                    ]}
                },
                {
                    "question": {"title": "Energia kinetyczna", "text": "Jaki jest wz√≥r na energiƒô kinetycznƒÖ?", "lang": "pl", "difficulty": 2, "emoji": "üí®", "examples": ["dla cia≈Ça o masie 4kg i prƒôdko≈õci 10m/s: Ek = 4√ó10¬≤/2 = 200J"]},
                    "answer": {"text": "Ek = mv¬≤/2", "type": "text", "lang": "pl"}
                },
                {
                    "question": {"title": "Energia potencjalna", "text": "Jaki jest wz√≥r na energiƒô potencjalnƒÖ grawitacji?", "lang": "pl", "difficulty": 2, "emoji": "‚õ∞Ô∏è"},
                    "answer": {"text": "Ep = mgh", "type": "text", "lang": "pl"}
                },
                {
                    "question": {"title": "Ruch jednostajny", "text": "Czy w ruchu jednostajnym prƒôdko≈õƒá jest sta≈Ça?", "lang": "pl", "difficulty": 1, "emoji": "‚û°Ô∏è"},
                    "answer": {"text": "true", "type": "boolean", "lang": "pl", "metadata": {"true_label": "Tak", "false_label": "Nie"}}
                },
                {
                    "question": {"title": "Zasady zachowania", "text": "Wybierz wszystkie wielko≈õci, kt√≥re zachowujƒÖ siƒô w uk≈Çadzie izolowanym:", "lang": "pl", "difficulty": 3, "emoji": "‚ôªÔ∏è"},
                    "answer": {"text": "a,b,c", "type": "multiple_choice", "lang": "pl", "options": [
                        {"value": "a", "label": "Energia ca≈Çkowita"},
                        {"value": "b", "label": "Pƒôd"},
                        {"value": "c", "label": "Masa"},
                        {"value": "d", "label": "Temperatura"}
                    ]}
                },
                {
                    "question": {"title": "Przyspieszenie ziemskie", "text": "Ile wynosi przyspieszenie ziemskie w m/s¬≤? (zaokrƒÖglij do liczby ca≈Çkowitej)", "lang": "pl", "difficulty": 1, "emoji": "üåç"},
                    "answer": {"text": "10", "type": "integer", "lang": "pl", "metadata": {"hint": "Dok≈Çadna warto≈õƒá to ~9.81 m/s¬≤"}}
                }
            ]
        },
        {
            "name": "Uk≈Çad okresowy pierwiastk√≥w",
            "subject": "Chemia",
            "category": "Chemia og√≥lna",
            "level": "Klasa 1",
            "description": "Podstawy uk≈Çadu okresowego",
            "favourite": True,
            "image": "üß™",
            "flashcards": [
                {
                    "question": {"title": "Liczba atomowa", "text": "Co oznacza liczba atomowa pierwiastka?", "lang": "pl", "difficulty": 1, "emoji": "üî¢"},
                    "answer": {"text": "Liczba proton√≥w w jƒÖdrze", "type": "short_text", "lang": "pl"}
                },
                {
                    "question": {"title": "Liczba masowa", "text": "Jak obliczamy liczbƒô masowƒÖ?", "lang": "pl", "difficulty": 1, "emoji": "‚öñÔ∏è"},
                    "answer": {"text": "Protony + neutrony", "type": "short_text", "lang": "pl"}
                },
                {
                    "question": {"title": "Okres", "text": "Co to jest okres w uk≈Çadzie okresowym?", "lang": "pl", "difficulty": 1, "emoji": "‚ÜîÔ∏è"},
                    "answer": {"text": "Wiersz poziomy", "type": "short_text", "lang": "pl"}
                },
                {
                    "question": {"title": "Grupa", "text": "Co to jest grupa w uk≈Çadzie okresowym?", "lang": "pl", "difficulty": 1, "emoji": "‚ÜïÔ∏è"},
                    "answer": {"text": "Kolumna pionowa", "type": "short_text", "lang": "pl"}
                },
                {
                    "question": {"title": "Metale", "text": "Gdzie w uk≈Çadzie okresowym znajdujƒÖ siƒô metale?", "lang": "pl", "difficulty": 1, "emoji": "üî®"},
                    "answer": {"text": "Po lewej stronie", "type": "short_text", "lang": "pl"}
                },
                {
                    "question": {"title": "Niemetal", "text": "Gdzie w uk≈Çadzie okresowym znajdujƒÖ siƒô niemetale?", "lang": "pl", "difficulty": 1, "emoji": "üí®"},
                    "answer": {"text": "Po prawej stronie", "type": "short_text", "lang": "pl"}
                }
            ]
        },
        {
            "name": "Algorytmy i struktury danych",
            "subject": "Informatyka",
            "category": "Algorytmika",
            "level": "Klasa 2",
            "description": "Podstawowe algorytmy i struktury danych",
            "favourite": False,
            "image": "üíª",
            "flashcards": [
                {
                    "question": {"title": "Sortowanie bƒÖbelkowe", "text": "Jaka jest z≈Ço≈ºono≈õƒá obliczeniowa sortowania bƒÖbelkowego?", "lang": "pl", "difficulty": 2, "emoji": "ü´ß"},
                    "answer": {"text": "O(n¬≤)", "type": "text", "lang": "pl"}
                },
                {
                    "question": {"title": "Stos", "text": "Jaka jest zasada dzia≈Çania stosu (stack)?", "lang": "pl", "difficulty": 1, "emoji": "üìö"},
                    "answer": {"text": "LIFO - Last In First Out", "type": "text", "lang": "pl"}
                },
                {
                    "question": {"title": "Kolejka", "text": "Jaka jest zasada dzia≈Çania kolejki (queue)?", "lang": "pl", "difficulty": 1, "emoji": "üö∂"},
                    "answer": {"text": "FIFO - First In First Out", "type": "text", "lang": "pl"}
                },
                {
                    "question": {"title": "Rekurencja", "text": "Co to jest rekurencja?", "lang": "pl", "difficulty": 2, "emoji": "üîÑ"},
                    "answer": {"text": "Funkcja wywo≈ÇujƒÖca samƒÖ siebie", "type": "short_text", "lang": "pl"}
                },
                {
                    "question": {"title": "Wyszukiwanie binarne", "text": "Jaka jest z≈Ço≈ºono≈õƒá wyszukiwania binarnego?", "lang": "pl", "difficulty": 2, "emoji": "üîç"},
                    "answer": {"text": "O(log n)", "type": "text", "lang": "pl"}
                }
            ]
        },
        get_answer_types_test_quiz()
    ]
}


def create_users(db):
    """Create demo users and return them."""
    user_service = UserService(db)
    created_users = {}

    print("üë• Creating users...")
    for user_data in USERS:
        username = user_data["username"]

        # Check if user already exists
        existing_user = user_service.get_user_by_name(username)
        if existing_user:
            print(f"   ‚ÑπÔ∏è  User '{username}' already exists, using existing user")
            created_users[username] = existing_user
        else:
            # Create new user with password
            user_create = UserCreate(
                name=username,
                email=user_data["email"],
                password=user_data["password"]
            )
            user = user_service.create_user(user_create)
            created_users[username] = user
            print(f"   ‚úÖ Created user: {username} ({user_data['email']})")

    return created_users


def import_quiz_from_file(db, file_path, user_id, category=None, level=None, favourite=False, image=None):
    """Import quiz from JSON file."""
    quiz_service = QuizService(db)

    # Read the file
    import json
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)

    # Add category and level if provided
    if category:
        data['quiz']['category'] = category
    if level:
        data['quiz']['level'] = level

    # Import quiz
    quiz = quiz_service.import_quiz_from_dict(data, user_id)

    # Update favourite and image fields
    if favourite or image:
        quiz.favourite = favourite
        if image:
            quiz.image = image.encode('utf-8')  # Store emoji as bytes
        db.commit()
        db.refresh(quiz)

    return quiz


def create_quiz_from_data(db, quiz_data, user_id):
    """Create quiz from dictionary data."""
    quiz_service = QuizService(db)

    # Create quiz
    quiz = quiz_service.create_quiz(
        name=quiz_data["name"],
        user_id=user_id,
        subject=quiz_data["subject"],
        category=quiz_data.get("category"),
        level=quiz_data.get("level"),
        description=quiz_data.get("description")
    )

    # Update favourite and image fields
    quiz.favourite = quiz_data.get("favourite", False)
    if quiz_data.get("image"):
        quiz.image = quiz_data["image"].encode('utf-8')  # Store emoji as bytes
    db.commit()
    db.refresh(quiz)

    # Add flashcards
    flashcard_repo = FlashcardRepository(db)
    flashcard_repo.bulk_create_flashcards(quiz.id, quiz_data["flashcards"])

    return quiz


def create_quizzes(db, users):
    """Create quizzes for all users."""
    print("\nüìö Creating quizzes...")
    user_quizzes = {}

    for username, quiz_list in QUIZZES.items():
        user = users[username]
        user_quizzes[username] = []

        print(f"\n   Creating quizzes for {username}:")

        for quiz_data in quiz_list:
            try:
                if "file" in quiz_data:
                    # Import from file
                    file_path = Path(project_root) / quiz_data["file"]
                    quiz = import_quiz_from_file(
                        db,
                        file_path,
                        user.id,
                        quiz_data.get("category"),
                        quiz_data.get("level"),
                        quiz_data.get("favourite", False),
                        quiz_data.get("image")
                    )
                    fav_marker = "‚≠ê" if quiz.favourite else ""
                    img_marker = quiz_data.get("image", "")
                    print(f"      ‚úÖ Imported: {quiz.name} {img_marker} {fav_marker} (from {quiz_data['file']})")
                else:
                    # Create from data
                    quiz = create_quiz_from_data(db, quiz_data, user.id)
                    fav_marker = "‚≠ê" if quiz.favourite else ""
                    img_marker = quiz_data.get("image", "")
                    print(f"      ‚úÖ Created: {quiz.name} {img_marker} {fav_marker}")

                user_quizzes[username].append(quiz)
            except Exception as e:
                print(f"      ‚ùå Failed to create quiz: {e}")

    return user_quizzes


def create_learning_history(db, users, user_quizzes):
    """Create historical learning sessions for users."""
    print("\nüìä Creating learning history...")

    # Get current time
    now = datetime.utcnow()

    for username, quizzes in user_quizzes.items():
        user = users[username]
        print(f"\n   Creating history for {username}:")

        session_count = 0

        for quiz in quizzes:
            # Get flashcard count for this quiz
            quiz_repo = QuizRepository(db)
            flashcard_repo = FlashcardRepository(db)
            flashcards = flashcard_repo.get_by_quiz_id(quiz.id)
            flashcard_count = len(flashcards)

            if flashcard_count == 0:
                continue

            # Create more sessions spread over the past year for better time period filtering
            # Favourite quizzes get more sessions
            if quiz.favourite:
                num_sessions = random.randint(30, 50)  # More sessions for favourites
            else:
                num_sessions = random.randint(15, 30)

            for i in range(num_sessions):
                # Distribution across time periods:
                # 20% in last 7 days (week)
                # 30% in last 30 days (month)
                # 30% in 30-180 days (half year)
                # 20% in 180-365 days (rest of year)
                rand_val = random.random()
                if rand_val < 0.2:
                    days_ago = random.randint(0, 7)
                elif rand_val < 0.5:
                    days_ago = random.randint(8, 30)
                elif rand_val < 0.8:
                    days_ago = random.randint(31, 180)
                else:
                    days_ago = random.randint(181, 365)

                hours_ago = random.randint(0, 23)
                session_date = now - timedelta(days=days_ago, hours=hours_ago)

                # Determine session mode (65% learn, 35% test)
                mode = "learn" if random.random() < 0.65 else "test"

                # Calculate score for test sessions (improve over time with variation)
                score = None
                if mode == "test":
                    # Progressive improvement: older sessions have lower scores
                    progress_factor = i / num_sessions  # 0 to 1
                    base_score = 55 + (progress_factor * 35)  # 55-90 range
                    variation = random.uniform(-15, 15)
                    score = max(30, min(100, base_score + variation))

                # Create session
                session = SessionModel(
                    user_id=user.id,
                    quiz_id=quiz.id,
                    mode=mode,
                    started_at=session_date,
                    completed_at=session_date + timedelta(minutes=random.randint(5, 30)),
                    score=score,
                    completed=True
                )
                db.add(session)
                session_count += 1

        db.commit()
        print(f"      ‚úÖ Created {session_count} learning sessions spanning 1 year")


def reset_database():
    """Drop and recreate all tables."""
    print("üóëÔ∏è  Resetting database...")
    Base.metadata.drop_all(bind=engine)
    Base.metadata.create_all(bind=engine)
    print("   ‚úÖ Database reset complete")


def main():
    """Main function to create demo data."""
    print("=" * 80)
    print("üéì SlayFlashcards - Demo Data Generator")
    print("=" * 80)
    print("\nTarget: Polish high school students")
    print("Creating: 2 users with quizzes and learning history\n")

    # Ask if user wants to reset database
    response = input("‚ö†Ô∏è  Reset database? This will DELETE ALL existing data! (yes/no/quit): ")
    if response.lower() == "yes":
        reset_database()
    elif response.lower() == "quit":
        print("Exiting without changes.")
        return


    db = next(get_db())

    try:
        # Create users
        users = create_users(db)

        # Create quizzes
        user_quizzes = create_quizzes(db, users)

        # Create learning history
        create_learning_history(db, users, user_quizzes)

        # Summary
        print("\n" + "=" * 80)
        print("‚úÖ Demo data created successfully!")
        print("=" * 80)

        # Only show credentials when not in CI environment
        import os
        is_ci = os.environ.get('VITE_IS_CI') == 'true' or os.environ.get('CI') == 'true'

        if not is_ci:
            print("\nüë• User Credentials:")
            print("-" * 80)
            for user_data in USERS:
                user = users[user_data["username"]]
                quiz_count = len(user_quizzes.get(user_data["username"], []))
                print(f"\n   Username: {user_data['username']}")
                print(f"   Email:    {user_data['email']}")
                print(f"   Password: {user_data['password']}")
                print(f"   Quizzes:  {quiz_count}")

            print("\n" + "=" * 80)
            print("üöÄ You can now login with these credentials!")
            print("=" * 80)
        else:
            print("\nüìä Summary:")
            print(f"   Users created: {len(users)}")
            total_quizzes = sum(len(quizzes) for quizzes in user_quizzes.values())
            print(f"   Total quizzes: {total_quizzes}")
            print("=" * 80)

    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()


if __name__ == "__main__":
    main()
