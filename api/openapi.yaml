openapi: 3.0.3
info:
  title: SlayFlashcards API
  description: |
    REST API for SlayFlashcards - An interactive flashcard learning platform with support for 
    multiple answer types, spaced repetition, and comprehensive progress tracking.
    
    ## Features
    - User authentication with JWT
    - Quiz and flashcard management
    - Multiple answer types (text, integer, float, boolean, choice, etc.)
    - Learning and test sessions
    - Progress tracking and statistics
    - Leaderboards and performance analytics
  version: 1.0.0
  contact:
    name: SlayFlashcards Support
    url: https://github.com/krizo/slayflashcards
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api/v1
    description: Local development server
  - url: https://api.slayflashcards.com/api/v1
    description: Production server

tags:
  - name: authentication
    description: User authentication and token management
  - name: users
    description: User management and statistics
  - name: quizzes
    description: Quiz creation, import/export, and management
  - name: flashcards
    description: Flashcard CRUD operations
  - name: sessions
    description: Learning and test sessions
  - name: health
    description: Health check endpoints

security:
  - bearerAuth: []

paths:
  # ============================================================================
  # HEALTH CHECK
  # ============================================================================
  /health:
    get:
      tags:
        - health
      summary: Health check endpoint
      description: Check if the API is running and responsive
      security: []
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: SlayFlashcards API
                  version:
                    type: string
                    example: 1.0.0

  # ============================================================================
  # AUTHENTICATION
  # ============================================================================
  /auth/register:
    post:
      tags:
        - authentication
      summary: Register a new user
      description: |
        Register a new user with username, password, and email. All fields are validated:
        - Username: 3-50 characters, alphanumeric with underscores/hyphens
        - Password: Minimum 8 characters, must contain uppercase, lowercase, and digit
        - Email: Valid email format
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              valid:
                summary: Valid registration
                value:
                  username: johndoe
                  password: SecurePass123
                  email: john@example.com
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '409':
          description: Username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicate_username:
                  summary: Duplicate username
                  value:
                    success: false
                    detail: Username already exists
                    status_code: 409
                duplicate_email:
                  summary: Duplicate email
                  value:
                    success: false
                    detail: Email address already exists
                    status_code: 409
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - authentication
      summary: Authenticate a user
      description: Authenticate with username and password, returns JWT access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      tags:
        - authentication
      summary: Get current user information
      description: Retrieve information about the currently authenticated user
      responses:
        '200':
          description: User information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - authentication
      summary: Refresh access token
      description: Refresh JWT access token
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - authentication
      summary: Logout user
      description: Logout user (client-side token removal)
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /auth/verify:
    get:
      tags:
        - authentication
      summary: Verify token validity
      description: Check if the current access token is valid
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      username:
                        type: string
                      user_id:
                        type: integer

  # ============================================================================
  # USERS
  # ============================================================================
  /users/:
    get:
      tags:
        - users
      summary: Get all users
      description: Retrieve list of users with optional filtering and pagination
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: name_contains
          in: query
          schema:
            type: string
          description: Filter users by name pattern
        - name: has_sessions
          in: query
          schema:
            type: boolean
          description: Filter users who have sessions
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'

    post:
      tags:
        - users
      summary: Create a new user
      description: Create a new user (admin only)
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '409':
          description: Username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/search:
    get:
      tags:
        - users
      summary: Search users
      description: Search users by name
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 1
          description: Search query
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Maximum results
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'

  /users/ensure:
    post:
      tags:
        - users
      summary: Ensure user exists
      description: Get user if exists, create if not
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: User retrieved or created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /users/leaderboard:
    get:
      tags:
        - users
      summary: Get user leaderboard
      description: Get user leaderboard based on performance
      parameters:
        - name: quiz_id
          in: query
          schema:
            type: integer
          description: Filter by specific quiz
        - name: mode
          in: query
          schema:
            type: string
            enum: [learn, test]
            default: test
          description: Filter by session mode
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of top users
      responses:
        '200':
          description: Leaderboard retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/LeaderboardData'

  /users/{user_id}:
    get:
      tags:
        - users
      summary: Get user by ID
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: User retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - users
      summary: Update user
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - users
      summary: Delete user
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
        - name: delete_sessions
          in: query
          schema:
            type: boolean
            default: false
          description: Also delete all user sessions
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/name/{username}:
    get:
      tags:
        - users
      summary: Get user by username
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /users/{user_id}/statistics:
    get:
      tags:
        - users
      summary: Get user statistics
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
      responses:
        '200':
          description: Statistics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatsResponse'

  /users/{user_id}/progress:
    get:
      tags:
        - users
      summary: Get user progress
      description: Get user learning progress over time
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
        - name: quiz_id
          in: query
          schema:
            type: integer
          description: Filter by specific quiz
        - name: days
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 30
          description: Number of days to analyze
      responses:
        '200':
          description: Progress data retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProgressResponse'

  # ============================================================================
  # QUIZZES
  # ============================================================================
  /quizzes/:
    get:
      tags:
        - quizzes
      summary: Get all quizzes
      description: Retrieve list of quizzes with optional filtering and pagination
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: subject
          in: query
          schema:
            type: string
          description: Filter by subject
        - name: name_contains
          in: query
          schema:
            type: string
          description: Filter by name pattern
        - name: created_after
          in: query
          schema:
            type: string
            format: date-time
          description: Filter quizzes created after date
        - name: created_before
          in: query
          schema:
            type: string
            format: date-time
          description: Filter quizzes created before date
      responses:
        '200':
          description: Quizzes retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizzesResponse'

    post:
      tags:
        - quizzes
      summary: Create a new quiz
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizCreate'
      responses:
        '201':
          description: Quiz created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizResponse'

  /quizzes/search:
    get:
      tags:
        - quizzes
      summary: Search quizzes
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 1
          description: Search query
        - name: subject
          in: query
          schema:
            type: string
          description: Filter by subject
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Maximum results
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizzesResponse'

  /quizzes/subjects:
    get:
      tags:
        - quizzes
      summary: Get all subjects
      description: Get all unique subjects with quiz counts
      responses:
        '200':
          description: Subjects retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    additionalProperties:
                      type: integer
                    example:
                      French: 5
                      Spanish: 3
                      Mathematics: 8

  /quizzes/import:
    post:
      tags:
        - quizzes
      summary: Import quiz from JSON data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizImportData'
      responses:
        '201':
          description: Quiz imported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizResponse'

  /quizzes/import-file:
    post:
      tags:
        - quizzes
      summary: Import quiz from file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Quiz imported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizResponse'

  /quizzes/{quiz_id}:
    get:
      tags:
        - quizzes
      summary: Get quiz by ID
      parameters:
        - $ref: '#/components/parameters/QuizIdParam'
      responses:
        '200':
          description: Quiz retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizResponse'
        '404':
          description: Quiz not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - quizzes
      summary: Update quiz
      parameters:
        - $ref: '#/components/parameters/QuizIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizUpdate'
      responses:
        '200':
          description: Quiz updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizResponse'

    delete:
      tags:
        - quizzes
      summary: Delete quiz
      parameters:
        - $ref: '#/components/parameters/QuizIdParam'
      responses:
        '204':
          description: Quiz deleted
        '404':
          description: Quiz not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /quizzes/{quiz_id}/statistics:
    get:
      tags:
        - quizzes
      summary: Get quiz statistics
      parameters:
        - $ref: '#/components/parameters/QuizIdParam'
      responses:
        '200':
          description: Statistics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizStatsResponse'

  /quizzes/{quiz_id}/export:
    get:
      tags:
        - quizzes
      summary: Export quiz as JSON
      parameters:
        - $ref: '#/components/parameters/QuizIdParam'
      responses:
        '200':
          description: Quiz exported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizImportData'

  /quizzes/{quiz_id}/duplicate:
    post:
      tags:
        - quizzes
      summary: Duplicate quiz
      parameters:
        - $ref: '#/components/parameters/QuizIdParam'
        - name: new_name
          in: query
          schema:
            type: string
          description: New name for duplicated quiz
      responses:
        '201':
          description: Quiz duplicated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizResponse'

  # ============================================================================
  # FLASHCARDS
  # ============================================================================
  /flashcards/:
    get:
      tags:
        - flashcards
      summary: Get flashcards
      description: Get flashcards with optional filtering
      parameters:
        - name: quiz_id
          in: query
          required: true
          schema:
            type: integer
          description: Filter by quiz ID
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: difficulty
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 5
          description: Filter by difficulty
        - name: question_lang
          in: query
          schema:
            type: string
          description: Filter by question language
        - name: answer_lang
          in: query
          schema:
            type: string
          description: Filter by answer language
        - name: answer_type
          in: query
          schema:
            $ref: '#/components/schemas/AnswerType'
          description: Filter by answer type
        - name: search_text
          in: query
          schema:
            type: string
          description: Search in question/answer text
      responses:
        '200':
          description: Flashcards retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlashcardsResponse'

    post:
      tags:
        - flashcards
      summary: Create flashcard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlashcardCreate'
      responses:
        '201':
          description: Flashcard created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlashcardResponse'

  /flashcards/bulk:
    post:
      tags:
        - flashcards
      summary: Bulk create flashcards
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkFlashcardCreate'
      responses:
        '201':
          description: Flashcards created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'

  /flashcards/{flashcard_id}:
    get:
      tags:
        - flashcards
      summary: Get flashcard by ID
      parameters:
        - $ref: '#/components/parameters/FlashcardIdParam'
      responses:
        '200':
          description: Flashcard retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlashcardResponse'

    put:
      tags:
        - flashcards
      summary: Update flashcard
      parameters:
        - $ref: '#/components/parameters/FlashcardIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlashcardUpdate'
      responses:
        '200':
          description: Flashcard updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlashcardResponse'

    delete:
      tags:
        - flashcards
      summary: Delete flashcard
      parameters:
        - $ref: '#/components/parameters/FlashcardIdParam'
      responses:
        '204':
          description: Flashcard deleted

  /flashcards/quiz/{quiz_id}/types:
    get:
      tags:
        - flashcards
      summary: Get answer type statistics
      parameters:
        - $ref: '#/components/parameters/QuizIdParam'
      responses:
        '200':
          description: Answer type statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      total_flashcards:
                        type: integer
                      answer_types:
                        type: object
                        additionalProperties:
                          type: integer
                      available_types:
                        type: array
                        items:
                          type: string

  # ============================================================================
  # SESSIONS
  # ============================================================================
  /sessions/:
    get:
      tags:
        - sessions
      summary: Get sessions
      description: Get sessions with optional filtering
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - name: user_id
          in: query
          schema:
            type: integer
          description: Filter by user ID
        - name: quiz_id
          in: query
          schema:
            type: integer
          description: Filter by quiz ID
        - name: mode
          in: query
          schema:
            $ref: '#/components/schemas/SessionMode'
          description: Filter by mode
        - name: score_min
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 100
          description: Minimum score
        - name: score_max
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 100
          description: Maximum score
        - name: started_after
          in: query
          schema:
            type: string
            format: date-time
          description: Started after date
        - name: started_before
          in: query
          schema:
            type: string
            format: date-time
          description: Started before date
      responses:
        '200':
          description: Sessions retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionsResponse'

    post:
      tags:
        - sessions
      summary: Create session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreate'
      responses:
        '201':
          description: Session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'

  /sessions/statistics:
    get:
      tags:
        - sessions
      summary: Get session statistics
      parameters:
        - name: user_id
          in: query
          schema:
            type: integer
          description: Filter by user ID
        - name: quiz_id
          in: query
          schema:
            type: integer
          description: Filter by quiz ID
        - name: days
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 30
          description: Number of days to analyze
      responses:
        '200':
          description: Statistics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionStatsResponse'

  /sessions/test/submit:
    post:
      tags:
        - sessions
      summary: Submit test answers
      description: Submit answers for a test session and get results
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestSubmission'
      responses:
        '200':
          description: Test results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResultsResponse'

  /sessions/{session_id}:
    get:
      tags:
        - sessions
      summary: Get session by ID
      parameters:
        - $ref: '#/components/parameters/SessionIdParam'
      responses:
        '200':
          description: Session retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'

    put:
      tags:
        - sessions
      summary: Update session
      parameters:
        - $ref: '#/components/parameters/SessionIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionUpdate'
      responses:
        '200':
          description: Session updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'

    delete:
      tags:
        - sessions
      summary: Delete session
      parameters:
        - $ref: '#/components/parameters/SessionIdParam'
      responses:
        '204':
          description: Session deleted

  /sessions/learning/{session_id}/progress:
    put:
      tags:
        - sessions
      summary: Update learning progress
      parameters:
        - $ref: '#/components/parameters/SessionIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LearningSessionUpdate'
      responses:
        '200':
          description: Progress updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'

  /sessions/user/{user_id}/recent:
    get:
      tags:
        - sessions
      summary: Get recent user sessions
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
          description: Number of recent sessions
        - name: mode
          in: query
          schema:
            $ref: '#/components/schemas/SessionMode'
          description: Filter by mode
      responses:
        '200':
          description: Recent sessions retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionsResponse'

  /sessions/quiz/{quiz_id}/performance:
    get:
      tags:
        - sessions
      summary: Get quiz performance stats
      parameters:
        - $ref: '#/components/parameters/QuizIdParam'
        - name: days
          in: query
          schema:
            type: integer
            default: 30
          description: Number of days to analyze
      responses:
        '200':
          description: Performance statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/QuizPerformanceStats'

# ==============================================================================
# COMPONENTS
# ==============================================================================
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    PageParam:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number

    LimitParam:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Items per page

    UserIdParam:
      name: user_id
      in: path
      required: true
      schema:
        type: integer
      description: User ID

    QuizIdParam:
      name: quiz_id
      in: path
      required: true
      schema:
        type: integer
      description: Quiz ID

    FlashcardIdParam:
      name: flashcard_id
      in: path
      required: true
      schema:
        type: integer
      description: Flashcard ID

    SessionIdParam:
      name: session_id
      in: path
      required: true
      schema:
        type: integer
      description: Session ID

  schemas:
    # ==========================================================================
    # ENUMS
    # ==========================================================================
    SessionMode:
      type: string
      enum:
        - learn
        - test
      description: Session mode

    AnswerType:
      type: string
      enum:
        - text
        - integer
        - float
        - range
        - boolean
        - choice
        - multiple_choice
        - short_text
      description: Answer type

    AnswerEvaluation:
      type: string
      enum:
        - correct
        - incorrect
        - partial
      description: Answer evaluation result

    # ==========================================================================
    # AUTHENTICATION
    # ==========================================================================
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 1
          example: johndoe
        password:
          type: string
          minLength: 1
          format: password
          example: SecurePass123

    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+
          example: johndoe
          description: Username (alphanumeric, underscore, hyphen)
        password:
          type: string
          minLength: 8
          maxLength: 128
          format: password
          example: SecurePass123
          description: Password (min 8 chars, must contain uppercase, lowercase, digit)
        email:
          type: string
          format: email
          example: john@example.com
          description: Valid email address

    Token:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          example: 1800
          description: Token expiration time in seconds

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Login successful
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/Token'

    # ==========================================================================
    # USER SCHEMAS
    # ==========================================================================
    UserBase:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
          example: johndoe

    UserCreate:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          required:
            - password
            - email
          properties:
            password:
              type: string
              minLength: 8
              maxLength: 128
              format: password
            email:
              type: string
              format: email

    UserUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100

    User:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            id:
              type: integer
              example: 1
            email:
              type: string
              format: email
              example: john@example.com
            created_at:
              type: string
              format: date-time
              example: '2025-09-29T10:30:00Z'

    UserStats:
      type: object
      properties:
        total_sessions:
          type: integer
          example: 42
        learn_sessions:
          type: integer
          example: 25
        test_sessions:
          type: integer
          example: 17
        average_score:
          type: number
          format: float
          nullable: true
          example: 85.5
        best_score:
          type: integer
          nullable: true
          example: 98
        study_streak:
          type: integer
          example: 7
          description: Consecutive days with study sessions
        favorite_subjects:
          type: array
          items:
            type: object
            properties:
              subject:
                type: string
              count:
                type: integer
        sessions_this_week:
          type: integer
          example: 5
        sessions_this_month:
          type: integer
          example: 18
        unique_quizzes:
          type: integer
          example: 8

    UserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/User'

    UsersResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'

    UserStatsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/UserStats'

    UserProgressResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            total_sessions:
              type: integer
            learn_sessions:
              type: integer
            test_sessions:
              type: integer
            days_analyzed:
              type: integer
            quiz_filter:
              type: integer
              nullable: true
            daily_activity:
              type: object
              additionalProperties:
                type: object
                properties:
                  learn_sessions:
                    type: integer
                  test_sessions:
                    type: integer
                  average_score:
                    type: number
                    nullable: true

    LeaderboardData:
      type: object
      properties:
        most_active:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: integer
              username:
                type: string
              session_count:
                type: integer
        best_performers:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: integer
              username:
                type: string
              average_score:
                type: number
              test_count:
                type: integer

    # ==========================================================================
    # QUIZ SCHEMAS
    # ==========================================================================
    QuizBase:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
          example: French Basics
        subject:
          type: string
          maxLength: 100
          example: French
        description:
          type: string
          maxLength: 1000
          example: Basic French vocabulary for beginners

    QuizCreate:
      allOf:
        - $ref: '#/components/schemas/QuizBase'

    QuizUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        subject:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 1000

    Quiz:
      allOf:
        - $ref: '#/components/schemas/QuizBase'
        - type: object
          properties:
            id:
              type: integer
              example: 1
            created_at:
              type: string
              format: date-time
            flashcard_count:
              type: integer
              example: 25

    QuizStats:
      type: object
      properties:
        total_cards:
          type: integer
          example: 25
        difficulty_distribution:
          type: object
          additionalProperties:
            type: integer
          example:
            1: 5
            2: 10
            3: 8
            4: 2
        question_languages:
          type: object
          additionalProperties:
            type: integer
          example:
            en: 25
        answer_languages:
          type: object
          additionalProperties:
            type: integer
          example:
            fr: 25
        answer_types:
          type: object
          additionalProperties:
            type: integer
          example:
            text: 20
            integer: 3
            boolean: 2
        subject:
          type: string
          example: French
        created_at:
          type: string
          format: date-time
        description:
          type: string

    QuizImportData:
      type: object
      required:
        - quiz
        - flashcards
      properties:
        quiz:
          type: object
          required:
            - name
          properties:
            name:
              type: string
            subject:
              type: string
            description:
              type: string
            created_at:
              type: string
        flashcards:
          type: array
          items:
            type: object
            required:
              - question
              - answer
            properties:
              question:
                type: object
                required:
                  - title
                  - text
                properties:
                  title:
                    type: string
                  text:
                    type: string
                  lang:
                    type: string
                  difficulty:
                    type: integer
                    minimum: 1
                    maximum: 5
                  emoji:
                    type: string
                  image:
                    type: string
              answer:
                type: object
                required:
                  - text
                properties:
                  text:
                    type: string
                  lang:
                    type: string
                  type:
                    $ref: '#/components/schemas/AnswerType'
                  options:
                    type: array
                    items:
                      type: object
                  metadata:
                    type: object

    QuizResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/Quiz'

    QuizzesResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/Quiz'

    QuizStatsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/QuizStats'

    # ==========================================================================
    # FLASHCARD SCHEMAS
    # ==========================================================================
    FlashcardQuestionBase:
      type: object
      required:
        - title
        - text
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 500
          example: dog
        text:
          type: string
          minLength: 1
          maxLength: 2000
          example: What is 'dog' in French?
        lang:
          type: string
          maxLength: 10
          example: en
        difficulty:
          type: integer
          minimum: 1
          maximum: 5
          example: 1
        emoji:
          type: string
          maxLength: 10
          example: 🐶
        image:
          type: string
          maxLength: 500
          example: dog.png

    FlashcardAnswerBase:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 2000
          example: chien
        lang:
          type: string
          maxLength: 10
          example: fr
        type:
          $ref: '#/components/schemas/AnswerType'
        options:
          type: array
          items:
            type: object
          nullable: true
        metadata:
          type: object
          nullable: true

    FlashcardCreate:
      type: object
      required:
        - quiz_id
        - question
        - answer
      properties:
        quiz_id:
          type: integer
          example: 1
        question:
          $ref: '#/components/schemas/FlashcardQuestionBase'
        answer:
          $ref: '#/components/schemas/FlashcardAnswerBase'

    FlashcardUpdate:
      type: object
      properties:
        question:
          $ref: '#/components/schemas/FlashcardQuestionBase'
        answer:
          $ref: '#/components/schemas/FlashcardAnswerBase'

    Flashcard:
      type: object
      properties:
        id:
          type: integer
          example: 1
        quiz_id:
          type: integer
          example: 1
        question_title:
          type: string
          example: dog
        question_text:
          type: string
          example: What is 'dog' in French?
        question_lang:
          type: string
          example: en
        question_difficulty:
          type: integer
          minimum: 1
          maximum: 5
        question_emoji:
          type: string
        question_image:
          type: string
        answer_text:
          type: string
          example: chien
        answer_lang:
          type: string
          example: fr
        answer_type:
          type: string
          example: text
        answer_options:
          type: array
          items:
            type: object
          nullable: true
        answer_metadata:
          type: object
          nullable: true

    FlashcardResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/Flashcard'

    FlashcardsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/Flashcard'

    BulkFlashcardCreate:
      type: object
      required:
        - quiz_id
        - flashcards
      properties:
        quiz_id:
          type: integer
        flashcards:
          type: array
          minItems: 1
          maxItems: 100
          items:
            type: object

    BulkOperationResult:
      type: object
      properties:
        total:
          type: integer
          example: 10
        successful:
          type: integer
          example: 10
        failed:
          type: integer
          example: 0
        errors:
          type: array
          items:
            type: string

    BulkOperationResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/BulkOperationResult'

    # ==========================================================================
    # SESSION SCHEMAS
    # ==========================================================================
    SessionCreate:
      type: object
      required:
        - user_id
        - quiz_id
        - mode
      properties:
        user_id:
          type: integer
          example: 1
        quiz_id:
          type: integer
          example: 1
        mode:
          $ref: '#/components/schemas/SessionMode'
        score:
          type: integer
          minimum: 0
          maximum: 100
          nullable: true

    SessionUpdate:
      type: object
      properties:
        score:
          type: integer
          minimum: 0
          maximum: 100
        completed_at:
          type: string
          format: date-time

    Session:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        quiz_id:
          type: integer
          example: 1
        mode:
          $ref: '#/components/schemas/SessionMode'
        started_at:
          type: string
          format: date-time
        score:
          type: integer
          minimum: 0
          maximum: 100
          nullable: true
        completed_at:
          type: string
          format: date-time
          nullable: true

    SessionStats:
      type: object
      properties:
        total_sessions:
          type: integer
        learn_sessions:
          type: integer
        test_sessions:
          type: integer
        average_score:
          type: number
          nullable: true
        best_score:
          type: integer
          nullable: true
        unique_quizzes:
          type: integer
        sessions_this_week:
          type: integer
        sessions_this_month:
          type: integer

    SessionResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/Session'

    SessionsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: array
          items:
            $ref: '#/components/schemas/Session'

    SessionStatsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/SessionStats'

    # ==========================================================================
    # TEST SESSION SCHEMAS
    # ==========================================================================
    TestAnswer:
      type: object
      required:
        - flashcard_id
        - user_answer
      properties:
        flashcard_id:
          type: integer
          example: 1
        user_answer:
          type: string
          example: chien
        time_taken:
          type: number
          format: float
          example: 5.2

    TestSubmission:
      type: object
      required:
        - session_id
        - answers
      properties:
        session_id:
          type: integer
          example: 1
        answers:
          type: array
          items:
            $ref: '#/components/schemas/TestAnswer'

    CardResult:
      type: object
      properties:
        flashcard_id:
          type: integer
        question:
          type: string
        user_answer:
          type: string
        correct_answer:
          type: string
        evaluation:
          $ref: '#/components/schemas/AnswerEvaluation'
        score:
          type: number
          format: float
          minimum: 0
          maximum: 1
        time_taken:
          type: number
          format: float
          nullable: true

    TestResults:
      type: object
      properties:
        session_id:
          type: integer
        total_questions:
          type: integer
        correct:
          type: integer
        partial:
          type: integer
        incorrect:
          type: integer
        final_score:
          type: integer
          minimum: 0
          maximum: 100
        time_taken:
          type: number
          format: float
          nullable: true
        breakdown:
          type: array
          items:
            $ref: '#/components/schemas/CardResult'

    TestResultsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/TestResults'

    # ==========================================================================
    # LEARNING SESSION SCHEMAS
    # ==========================================================================
    LearningProgress:
      type: object
      required:
        - flashcard_id
        - reviewed
      properties:
        flashcard_id:
          type: integer
        reviewed:
          type: boolean
        confidence:
          type: integer
          minimum: 1
          maximum: 5
          nullable: true
        time_spent:
          type: number
          format: float
          nullable: true

    LearningSessionUpdate:
      type: object
      required:
        - progress
      properties:
        progress:
          type: array
          items:
            $ref: '#/components/schemas/LearningProgress'

    # ==========================================================================
    # PERFORMANCE SCHEMAS
    # ==========================================================================
    QuizPerformanceStats:
      type: object
      properties:
        quiz_id:
          type: integer
        quiz_name:
          type: string
        total_sessions:
          type: integer
        test_sessions:
          type: integer
        learn_sessions:
          type: integer
        unique_users:
          type: integer
        days_analyzed:
          type: integer
        scores:
          type: object
          properties:
            average:
              type: number
              nullable: true
            highest:
              type: integer
              nullable: true
            lowest:
              type: integer
              nullable: true
            distribution:
              type: object
              additionalProperties:
                type: integer
        activity_trend:
          type: object
          additionalProperties:
            type: object
            properties:
              sessions:
                type: integer
              average_score:
                type: number
                nullable: true

    # ==========================================================================
    # ERROR SCHEMAS
    # ==========================================================================
    ErrorDetail:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
        code:
          type: string

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: Input validation failed
        details:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
        request_id:
          type: string
        timestamp:
          type: string
          format: date-time
        status_code:
          type: integer
          example: 400