name: CI – Backend + Frontend + Smoke test

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "staging"
        type: choice
        options:
          - "staging"
          - "production"
      deploy:
        description: "Deploy after build?"
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

jobs:
  ci:
    runs-on: self-hosted
    env:
      BACKEND_PID_FILE: /tmp/slayflashcards-backend-ci.pid
      FRONTEND_PID_FILE: /tmp/slayflashcards-frontend-ci.pid

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      # ─────── Backend ───────
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Create virtual environment and install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🗄️ Initialize database
        run: |
          source .venv/bin/activate
          python -c "from core.db.database import Base, engine; Base.metadata.create_all(bind=engine); print('Database initialized')"

      - name: 🚀 Start FastAPI backend
        run: |
          source .venv/bin/activate
          nohup uvicorn api.main_api:app --host 0.0.0.0 --port 8000 > /tmp/backend-ci.log 2>&1 &
          echo $! > $BACKEND_PID_FILE
          echo "Backend started with PID $(cat $BACKEND_PID_FILE)"
          sleep 3

      - name: ✅ Verify backend is running
        run: |
          if ! ps -p $(cat $BACKEND_PID_FILE) > /dev/null; then
            echo "Backend failed to start!"
            cat /tmp/backend-ci.log
            exit 1
          fi

      # ─────── Frontend ───────
      - name: 🟦 Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: 📦 Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: 🛠 Build frontend
        working-directory: frontend
        run: npm run build

      - name: 🚀 Start frontend preview server
        working-directory: frontend
        run: |
          nohup npm run preview -- --port 3000 > /tmp/frontend-ci.log 2>&1 &
          echo $! > $FRONTEND_PID_FILE
          echo "Frontend started with PID $(cat $FRONTEND_PID_FILE)"
          sleep 5

      - name: ✅ Verify frontend is running
        run: |
          if ! ps -p $(cat $FRONTEND_PID_FILE) > /dev/null; then
            echo "Frontend failed to start!"
            cat /tmp/frontend-ci.log
            exit 1
          fi

      # ─────── Smoke tests ───────
      - name: 🧪 Smoke test backend
        run: |
          echo "Testing backend at http://localhost:8000/docs"
          curl -f http://localhost:8000/docs || (cat /tmp/backend-ci.log && exit 1)

      - name: 🧪 Smoke test frontend
        run: |
          echo "Testing frontend at http://localhost:3000"
          curl -f http://localhost:3000 || (cat /tmp/frontend-ci.log && exit 1)

      # ─────── Cleanup test processes ───────
      - name: 🧹 Stop test backend and frontend
        if: always()
        run: |
          if [ -f "$BACKEND_PID_FILE" ]; then
            kill $(cat $BACKEND_PID_FILE) 2>/dev/null || true
            rm $BACKEND_PID_FILE
          fi
          if [ -f "$FRONTEND_PID_FILE" ]; then
            kill $(cat $FRONTEND_PID_FILE) 2>/dev/null || true
            rm $FRONTEND_PID_FILE
          fi
          # Kill any remaining uvicorn/vite processes on CI ports
          pkill -f "uvicorn.*:8000" || true
          pkill -f "vite.*3000" || true

#      - name: Backend Tests
#        run: |
#          pytest tests

#      - name: Frontend Tests
#        working-directory: frontend
#        run: |
#          npm run test

      # ─────── Conditional Deploy ───────
      - name: 🚀 Deploy to ${{ github.event.inputs.environment }}
        if: ${{ github.event.inputs.deploy == 'true' }}
        run: |
          echo "=== Deploying to ${{ github.event.inputs.environment }} ==="

          # Create deployment directories
          sudo mkdir -p /opt/slayflashcards/{frontend,backend}

          # Deploy frontend (dist folder for serving)
          echo "📦 Deploying frontend..."
          sudo rsync -av --delete frontend/dist/ /opt/slayflashcards/frontend/dist/

          # Copy package files needed for vite preview
          sudo cp frontend/package.json /opt/slayflashcards/frontend/
          sudo cp frontend/package-lock.json /opt/slayflashcards/frontend/ || true
          sudo cp frontend/vite.config.ts /opt/slayflashcards/frontend/

          # Install production dependencies for frontend
          echo "📦 Installing frontend dependencies..."
          cd /opt/slayflashcards/frontend
          sudo npm ci --omit=dev

          # Return to repository directory for backend deployment
          cd $GITHUB_WORKSPACE

          # Deploy backend (api + core + requirements)
          echo "📦 Deploying backend..."
          sudo rsync -av --delete api/ /opt/slayflashcards/backend/api/
          sudo rsync -av --delete core/ /opt/slayflashcards/backend/core/
          sudo rsync -av requirements.txt /opt/slayflashcards/backend/

          # Setup Python virtual environment on production
          echo "🐍 Setting up Python virtual environment..."
          sudo python3 -m venv /opt/slayflashcards/backend/.venv
          sudo /opt/slayflashcards/backend/.venv/bin/pip install --upgrade pip
          sudo /opt/slayflashcards/backend/.venv/bin/pip install -r /opt/slayflashcards/backend/requirements.txt

          # Initialize/migrate database
          echo "🗄️ Initializing database..."
          cd /opt/slayflashcards/backend
          sudo .venv/bin/python -c "from core.db.database import Base, engine; Base.metadata.create_all(bind=engine); print('Database initialized')" || echo "Database already exists"

          # Set proper permissions
          echo "🔐 Setting permissions..."
          sudo chown -R $USER:$USER /opt/slayflashcards/
          sudo chmod -R 755 /opt/slayflashcards/

          # Return to repository directory for deployment files
          cd $GITHUB_WORKSPACE

          # Install/update systemd service files
          echo "⚙️ Installing systemd service files..."
          sudo cp deployment/slayflashcards-backend.service /etc/systemd/system/
          sudo cp deployment/slayflashcards-frontend.service /etc/systemd/system/
          sudo systemctl daemon-reload

          # Restart services
          echo "🔄 Restarting services..."
          sudo systemctl restart slayflashcards-backend
          sudo systemctl restart slayflashcards-frontend

          # Verify services are running
          echo "✅ Verifying deployment..."
          sudo systemctl status slayflashcards-backend --no-pager || true
          sudo systemctl status slayflashcards-frontend --no-pager || true

          echo "=== Deployment complete ==="