name: CI – Backend + Frontend + Smoke test

on:
  push:
    branches:
      - staging
  pull_request:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "staging"
        type: choice
        options:
          - "staging"
          - "production"
      deploy:
        description: "Deploy after build?"
        required: true
        default: "true"
        type: choice
        options:
          - "false"
          - "true"
      recreate_database:
        description: "Recreate database and add demo data?"
        required: true
        default: "true"
        type: choice
        options:
          - "false"
          - "true"

jobs:
  ci:
    runs-on: self-hosted
    env:
      BACKEND_PID_FILE: /tmp/slayflashcards-backend-ci.pid
      FRONTEND_PID_FILE: /tmp/slayflashcards-frontend-ci.pid
      # Environment-specific configurations
      DEPLOY_DIR: ${{ github.event.inputs.environment == 'production' && '/opt/slayflashcards/production' || '/opt/slayflashcards/staging' }}
      BACKEND_PORT: ${{ github.event.inputs.environment == 'production' && '8002' || '8000' }}
      FRONTEND_PORT: ${{ github.event.inputs.environment == 'production' && '3002' || '3000' }}
      SERVICE_SUFFIX: ${{ github.event.inputs.environment == 'production' && '-production' || '-staging' }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      # ─────── Backend ───────
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Create virtual environment and install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🗄️ Initialize database
        run: |
          source .venv/bin/activate
          python -c "from core.db.database import Base, engine; Base.metadata.create_all(bind=engine); print('Database initialized')"

      - name: 🚀 Start FastAPI backend
        run: |
          source .venv/bin/activate
          nohup uvicorn api.main_api:app --host 0.0.0.0 --port 8001 > /tmp/backend-ci.log 2>&1 &
          echo $! > $BACKEND_PID_FILE
          echo "Backend started with PID $(cat $BACKEND_PID_FILE)"
          sleep 3

      - name: ✅ Verify backend is running
        run: |
          if ! ps -p $(cat $BACKEND_PID_FILE) > /dev/null; then
            echo "Backend failed to start!"
            cat /tmp/backend-ci.log
            exit 1
          fi

      # ─────── Frontend ───────
      - name: 🟦 Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: 📦 Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: 🛠 Build frontend
        working-directory: frontend
        run: |
          export VITE_BUILD_VERSION=$(git rev-parse --short HEAD)
          export VITE_BUILD_DATE=$(date +'%Y-%m-%d %H:%M')
          export VITE_IS_CI=true
          export VITE_ENVIRONMENT=${{ github.event.inputs.environment || 'staging' }}
          export VITE_BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          npm run build

      - name: 🚀 Start frontend preview server
        working-directory: frontend
        run: |
          nohup npm run preview -- --port 3001 > /tmp/frontend-ci.log 2>&1 &
          echo $! > $FRONTEND_PID_FILE
          echo "Frontend started with PID $(cat $FRONTEND_PID_FILE)"
          sleep 5

      - name: ✅ Verify frontend is running
        run: |
          if ! ps -p $(cat $FRONTEND_PID_FILE) > /dev/null; then
            echo "Frontend failed to start!"
            cat /tmp/frontend-ci.log
            exit 1
          fi

      # ─────── Smoke tests ───────
      - name: 🧪 Smoke test backend
        run: |
          echo "Testing backend at http://localhost:8001/docs"
          curl -f http://localhost:8001/docs || (cat /tmp/backend-ci.log && exit 1)

      - name: 🧪 Smoke test frontend
        run: |
          echo "Testing frontend at http://localhost:3001"
          curl -f http://localhost:3001 || (cat /tmp/frontend-ci.log && exit 1)

      # ─────── Cleanup test processes ───────
      - name: 🧹 Stop test backend and frontend
        if: always()
        run: |
          if [ -f "$BACKEND_PID_FILE" ]; then
            kill $(cat $BACKEND_PID_FILE) 2>/dev/null || true
            rm $BACKEND_PID_FILE
          fi
          if [ -f "$FRONTEND_PID_FILE" ]; then
            kill $(cat $FRONTEND_PID_FILE) 2>/dev/null || true
            rm $FRONTEND_PID_FILE
          fi
          # Kill any remaining uvicorn/vite processes on CI ports
          pkill -f "uvicorn.*:8001" || true
          pkill -f "vite.*3001" || true

      #      - name: Backend Tests
      #        run: |
      #          pytest tests

      #      - name: Frontend Tests
      #        working-directory: frontend
      #        run: |
      #          npm run test

      # ─────── Conditional Deploy ───────
      - name: 🚀 Deploy to ${{ github.event.inputs.environment }}
        if: ${{ github.event.inputs.deploy == 'true' }}
        run: |
          echo "=== Deploying to ${{ github.event.inputs.environment }} ==="
          echo "Deploy directory: $DEPLOY_DIR"
          echo "Backend port: $BACKEND_PORT"
          echo "Frontend port: $FRONTEND_PORT"
          echo "Service suffix: $SERVICE_SUFFIX"

          # Create deployment directories
          sudo mkdir -p $DEPLOY_DIR/{frontend,backend}

          # Deploy frontend (dist folder for serving)
          echo "📦 Deploying frontend..."
          sudo rsync -av --delete frontend/dist/ $DEPLOY_DIR/frontend/dist/

          # Copy package files needed for vite preview
          sudo cp frontend/package.json $DEPLOY_DIR/frontend/
          sudo cp frontend/package-lock.json $DEPLOY_DIR/frontend/ || true
          sudo cp frontend/vite.config.ts $DEPLOY_DIR/frontend/

          # Install frontend dependencies (including vite for preview server)
          echo "📦 Installing frontend dependencies..."
          cd $DEPLOY_DIR/frontend
          sudo npm ci

          # Return to repository directory for backend deployment
          cd $GITHUB_WORKSPACE

          # Deploy backend (api + core + requirements + scripts)
          echo "📦 Deploying backend..."
          sudo rsync -av --delete api/ $DEPLOY_DIR/backend/api/
          sudo rsync -av --delete core/ $DEPLOY_DIR/backend/core/
          sudo rsync -av --delete scripts/ $DEPLOY_DIR/backend/scripts/
          sudo rsync -av --delete data/ $DEPLOY_DIR/backend/data/
          sudo rsync -av requirements.txt $DEPLOY_DIR/backend/

          # Setup Python virtual environment
          echo "🐍 Setting up Python virtual environment..."
          sudo python3 -m venv $DEPLOY_DIR/backend/.venv
          sudo $DEPLOY_DIR/backend/.venv/bin/pip install --upgrade pip
          sudo $DEPLOY_DIR/backend/.venv/bin/pip install -r $DEPLOY_DIR/backend/requirements.txt

          # Set proper permissions
          echo "🔐 Setting permissions..."
          sudo chown -R $USER:$USER $DEPLOY_DIR/
          sudo chmod -R 755 $DEPLOY_DIR/

          # Initialize/reset database based on input
          echo "🗄️ Database setup..."
          cd $DEPLOY_DIR/backend
          DB_FILE="slayflashcards${{ github.event.inputs.environment == 'production' && '-production' || '-staging' }}.db"
          export DATABASE_URL="sqlite:///$DEPLOY_DIR/backend/$DB_FILE"
          echo "Using database: $DATABASE_URL"

          if [ "${{ github.event.inputs.recreate_database }}" == "true" ]; then
            echo "Recreating database with demo data..."
            sudo -u $USER DATABASE_URL="$DATABASE_URL" .venv/bin/python scripts/init_database.py --reset --demo
          else
            echo "Initializing database (keeping existing data)..."
            sudo -u $USER DATABASE_URL="$DATABASE_URL" .venv/bin/python scripts/init_database.py
          fi

          # Return to repository directory for deployment files
          cd $GITHUB_WORKSPACE

          # Stop and disable old non-environment-specific services
          echo "🧹 Cleaning up old services..."
          sudo systemctl stop slayflashcards-backend.service 2>/dev/null || true
          sudo systemctl stop slayflashcards-frontend.service 2>/dev/null || true
          sudo systemctl disable slayflashcards-backend.service 2>/dev/null || true
          sudo systemctl disable slayflashcards-frontend.service 2>/dev/null || true

          # Install/update systemd service files
          echo "⚙️ Installing systemd service files..."
          sudo cp deployment/slayflashcards-backend$SERVICE_SUFFIX.service /etc/systemd/system/
          sudo cp deployment/slayflashcards-frontend$SERVICE_SUFFIX.service /etc/systemd/system/
          sudo systemctl daemon-reload

          # Enable and restart services
          echo "🔄 Starting services..."
          sudo systemctl enable slayflashcards-backend$SERVICE_SUFFIX
          sudo systemctl enable slayflashcards-frontend$SERVICE_SUFFIX
          sudo systemctl restart slayflashcards-backend$SERVICE_SUFFIX
          sudo systemctl restart slayflashcards-frontend$SERVICE_SUFFIX

          # Verify services are running
          echo "✅ Verifying deployment..."
          sudo systemctl status slayflashcards-backend$SERVICE_SUFFIX --no-pager || true
          sudo systemctl status slayflashcards-frontend$SERVICE_SUFFIX --no-pager || true

          echo ""
          echo "╔══════════════════════════════════════════════════════════════════════════════╗"
          echo "║                          DEPLOYMENT SUMMARY                                  ║"
          echo "╚══════════════════════════════════════════════════════════════════════════════╝"
          echo ""
          echo "📋 Deployment Configuration:"
          echo "   Environment:           ${{ github.event.inputs.environment }}"
          echo "   Database Recreated:    ${{ github.event.inputs.recreate_database }}"
          echo "   Deployment Directory:  $DEPLOY_DIR"
          echo ""
          echo "🌐 Service Endpoints:"
          echo "   Backend API:           http://localhost:$BACKEND_PORT"
          echo "   Backend API Docs:      http://localhost:$BACKEND_PORT/docs"
          echo "   Frontend:              http://localhost:$FRONTEND_PORT"
          echo ""
          echo "⚙️  Systemd Services:"
          echo "   Backend Service:       slayflashcards-backend$SERVICE_SUFFIX"
          echo "   Frontend Service:      slayflashcards-frontend$SERVICE_SUFFIX"
          echo ""
          echo "💾 Database:"
          echo "   Location:              $DEPLOY_DIR/backend/slayflashcards${{ github.event.inputs.environment == 'production' && '-production' || '-staging' }}.db"
          echo "   Demo Data:             ${{ github.event.inputs.recreate_database == 'true' && 'Installed' || 'Not installed' }}"
          echo ""
          echo "✅ Deployment completed successfully!"
          echo "════════════════════════════════════════════════════════════════════════════════"